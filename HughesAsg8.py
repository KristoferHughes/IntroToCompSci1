## Kristofer Hughes## I worked with Adam Melle and Matt Davis. Adam helped me with the first problem, specifically the last few lines regarding ord(). Matt Davis helped me overall work through the second and third problems.## WARNING: missing docstrings and missing comments will lose points# Question 1def inversions(s):    "Takes a sequence of uppercase characters as a parameter and returns the number of inversions in the sequence."    numco=0    for i in range(len(s)):        for j in range(i,len(s)):#Initially I started with the len first in the parentheses, but I got duplicate counting, so I switched the order around to start with i            if ord(s[i])>ord(s[j]):#I tried a few different functions, and ord worked well. Weird solution, but it's not stupid if it works                numco+=1    return numco    # Question 2def decVal(n):    "In this function n is the starting number, and the function decrements n by 0.31 until it reaches a negative number. After a negative number is reached, a list is returned with the number of times the decrement was made before reaching negative."    numList=[]    outputList=[]    done=False    checkInput=n    while not done:        try:            check=checkInput-1      ## Checks if input is numeric             if check>=0:            ## Checks if input is greater than 1                n=round(n-.31,2)                    if n>0:             ## Checks to see if n is negative which says to stop subtraction                    numList.append(n)                else:                    done=True            else:                outputString="n must be greater than or equal to 1"                done=True        except TypeError:            outputString="n must be numeric"            done=True    try:                             ## Tries to format the answer correctly        outputList.append(len(numList))        outputList.append(numList[-2])        outputList.append(numList[-1])    except IndexError:              ## Accounts for when numList is empty        outputList=[]    if len(outputList)==0:          ## Determines whether to return list or string        output=outputString    else:        output=outputList    return(output)    # Question 3def letter2Number(grade):    "Takes a string, which represents a letter grade, as a parameter, and then returns the grade point associated with that grade."    d=[['A',4.0],['B',3.0],['C',2.0],['D',1.0],['F',0]] # leave this here    letterGrade=grade.upper()    output="Not Done"    done=False    while not done:        if len(grade)==1:                    ## Sperates Grades with +/- on the end            for i in range(len(d)):          ## Loops through d                grade=d[i][0]                gpa=d[i][1]                if letterGrade==grade:       ## Checks if i is equal to input                    output=gpa                else:                        ## If i not equal the grade doesn't exist                    output="unknown grade"        else:                                ## Handles grades with +/- on the end            if letterGrade[1]=="+":          ## + bumps gpa up .3                plusMinus=.3            elif letterGrade[1]=="-":        ## - bumps gpa down .3                plusMinus=-.3            else:                            ## There is a second letter but it is not +/-                output="Not a valid Grade"            gradeLetter=letterGrade[0]       ## Gets the letter of value            for i in range(len(d)):          ## Loops through d                grade=d[i][0]                gpa=d[i][1]                if gradeLetter==grade:       ## Checks if i equal to input                    output=gpa+plusMinus     ## Combines the letter grade and +/-        if letterGrade=="A+":                ## Accounts for difference in pattern            output=4.0        elif letterGrade=="F-" or letterGrade=="F+":  ## Accounts for difference in pattern            output=0        done=True    return(output)    if __name__ == "__main__":    def check(output, expected):        if output != expected:            return "FAILED!"        else:            return "PASSED!"    print("RUNNING CHECK ...")    print('inversions("ABBFHDL"): ' + check(inversions('ABBFHDL'),2))    print('inversions("ABCD"): ' + check(inversions('ABCD'),0))    print('inversions("CDBA"): ' + check(inversions('CDBA'),5))    print('inversions("DCBA"): ' + check(inversions('DCBA'),6))    print('inversions(""): ' + check(inversions(''),0))    print()    print('letter2Number("A-"): ' + check(letter2Number('A-'),3.7))    print('letter2Number("c+"): ' + check(letter2Number('c+'),2.3))    print('letter2Number("f"): ' + check(letter2Number('f'),0))    print('letter2Number("x"): ' + check(letter2Number('x'),'unknown grade'))    print()    print('decVal(3.1): ' + check(decVal(3.1),[9, 0.62, 0.31]))    print('decVal(1): ' + check(decVal(1),[3, 0.38, 0.07]))    print('decVal("a"): ' + check(decVal('a'),'n must be numeric'))    print('decVal(0): ' + check(decVal(0),'n must be greater than or equal to 1'))